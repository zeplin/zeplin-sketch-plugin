var supportsFrame = function() {
    var version = [[NSBundle mainBundle] objectForInfoDictionaryKey:@"CFBundleShortVersionString"];

    return [version compare:@"2025.1" options:NSNumericSearch] != NSOrderedAscending;
}

var isSelectionExportable = function (layers) {
    var overSizedLayerName = nil;
    // `size` on `CGRect` fails on Mocha, on macOS 13.0 same as macOS 10.13, Sketch 45 and below.
    try {
        var layerPixelLimit = 1000000000; // 1e9

        var layersLoop = [layers objectEnumerator];
        var layer = nil;
        while (layer = [layersLoop nextObject]) {
            var layerSize = layer.rect().size;
            if (layerSize.width * layerSize.height > layerPixelLimit) {
                overSizedLayerName = layer.name();
                break;
            }
        }

        layerSize = nil;
        layer = nil;
        layersLoop = nil;
        layerPixelLimit = nil;
    } catch (error) {
        log("Checking oversized artboards failed with error “" + error + "”.");

        return true;
    }

    if (overSizedLayerName) {
        var artboardType = supportsFrame() ? @"frame" : @"artboard";
        [NSApp displayDialog:@"Selected " + artboardType + " “" + overSizedLayerName + "” is too large to export. Due to a limitation in Sketch, it’s only possible to export " + artboardType + "s smaller than 30,000 px ⨉ 30,000 px.\n\n☝️ You can divide the " + artboardType + " into multiple " + artboardType + "s and export again." withTitle: [artboardType capitalizedString] + @" too large"];

        return false;
    }

    return true;
}

var temporaryPath = function() {
    var name = [[[NSUUID UUID] UUIDString] stringByAppendingPathExtension:@"sketch"];
    var temporaryDirectory = NSTemporaryDirectory();
    var temporaryZeplinDirectory = [temporaryDirectory stringByAppendingPathComponent:@"io.zeplin.osx"];

    var fileManager = [NSFileManager defaultManager];
    if (![fileManager fileExistsAtPath:temporaryZeplinDirectory]) {
        [fileManager createDirectoryAtPath:temporaryZeplinDirectory withIntermediateDirectories:true attributes:nil error:nil];
    }

    var path = [temporaryZeplinDirectory stringByAppendingPathComponent:name];

    name = nil;
    temporaryDirectory = nil;
    temporaryZeplinDirectory = nil;
    isDir = nil;
    fileManager = nil;

    return path;
}

var temporaryPathForDesignFile = function (context) {
    var doc = context.document;
    var path = temporaryPath();

    [doc showMessage:@"Saving document…"];
    [doc saveToURL:[NSURL fileURLWithPath: path] ofType:@"com.bohemiancoding.sketch.drawing.single" forSaveOperation:NSSaveToOperation delegate:nil didSaveSelector:nil contextInfo:nil];

    var fileManager = [NSFileManager defaultManager];
    var stopTime = [NSDate dateWithTimeIntervalSinceNow:30];
    while (![fileManager fileExistsAtPath:path] && [stopTime compare:[NSDate date]] == NSOrderedDescending) {
        [[NSRunLoop currentRunLoop] runMode:NSDefaultRunLoopMode beforeDate:[NSDate distantFuture]];
    }

    if (![fileManager fileExistsAtPath:path]) {
        [doc showMessage:@"Saving document failed…"];

        return nil;
    }

    fileManager = nil;
    stopTime = nil;

    return path;
}

var directivesPath = function() {
    var name = [[[NSUUID UUID] UUIDString] stringByAppendingPathExtension:@"zpl"];
    var temporaryDirectory = NSTemporaryDirectory();
    var path = [temporaryDirectory stringByAppendingPathComponent:name];

    temporaryDirectory = nil;
    name = nil;

    return path;
}

var defaultDirectives = function(context, temporaryPath) {
    var doc = context.document;

    var version = [[NSBundle mainBundle] objectForInfoDictionaryKey:@"CFBundleShortVersionString"];
    var sketchtoolPath = [[NSBundle mainBundle] pathForResource:@"sketchtool" ofType:nil inDirectory:@"sketchtool/bin"];
    var sketchmigratePath = [[NSBundle mainBundle] pathForResource:@"sketchmigrate" ofType:nil inDirectory:@"sketchtool/bin"];

    var directives = [NSMutableDictionary dictionary];
    [directives setObject:temporaryPath forKey:@"temporaryPath"];
    [directives setObject:[[doc fileURL] path] forKey:@"path"];
    [directives setObject:@"json" forKey:@"format"];
    if (version) {
        [directives setObject:version forKey:@"version"];
    }
    if (sketchtoolPath) {
        [directives setObject:sketchtoolPath forKey:@"sketchtoolPath"];
    }
    if (sketchmigratePath) {
        [directives setObject:sketchmigratePath forKey:@"sketchmigratePath"];
    }

    format = nil;
    version = nil;
    sketchmigratePath = nil;
    sketchtoolPath = nil;
    assetLibraries = nil;

    return directives;
}

var writeDirectives = function (directives, path) {
    if (!path) {
        return nil;
    }

    [directives writeToFile:path atomically:false];

    return path;
}

var getShareId = function (context) {
    try {
        return context.document.cloudShare().shortID();
    } catch (error) {
        log("Getting cloud file “shortID” failed with error “" + error + "”."));
    }

    return nil;
}

var getSourceFileName = function (context) {
    try {
        return context.document.displayName();
    } catch (error) {
        log("Getting source file name failed with error “" + error + "”."));
    }

    return nil;
}

var launchZeplin = function (context, path) {
    var doc = context.document;
    var workspace = [NSWorkspace sharedWorkspace];

    var applicationPath = [workspace absolutePathForAppBundleWithIdentifier:@"io.zeplin.osx"];
    if (!applicationPath) {
        [NSApp displayDialog:@"Please make sure that you installed and launched it: https://zpl.io/download" withTitle:"Could not find Zeplin"];

        return;
    }

    [doc showMessage:@"Launching Zeplin!"];

    [workspace openFile:path withApplication:applicationPath andDeactivate:true];

    workspace = nil;
    applicationPath = nil;
}

var exportArtboards = function (context, artboards, temporaryPath) {
    var doc = context.document;
    var shareId = getShareId(context);
    var sourceFileName = getSourceFileName(context);

    var artboardIds = [artboards valueForKeyPath:@"objectID"];

    var layers = [[[doc documentData] allSymbols] arrayByAddingObjectsFromArray:artboards];
    var pageIds = [layers valueForKeyPath:@"@distinctUnionOfObjects.parentPage.objectID"];

    layers = nil;

    var containsArtboard = false;
    var artboardsLoop = [artboards objectEnumerator];
    var artboard = nil;
    while (artboard = [artboardsLoop nextObject]) {
        if (isLayerOfType(artboard, @"artboard")) {
            containsArtboard = true;

            break;
        }
    }

    artboard = nil;
    artboardsLoop = nil;

    var uniqueArtboardSizes = [];
    // `size` on `CGRect` fails on Mocha, on macOS 13.0 same as macOS 10.13, Sketch 45 and below.
    try {
        var loop = [artboards objectEnumerator];
        var artboard = nil;
        while (artboard = [loop nextObject]) {
            var artboardSize = artboard.rect().size;

            var isUnique = true;
            for (var k = 0; k < uniqueArtboardSizes.length; k++) {
                if (uniqueArtboardSizes[k].width == artboardSize.width && uniqueArtboardSizes[k].height == artboardSize.height) {
                    isUnique = false;

                    break;
                }
            }

            if (isUnique) {
                uniqueArtboardSizes.push({
                    width: artboardSize.width,
                    height: artboardSize.height
                });
            }

            artboardSize = nil;
            isUnique = nil;
        }

        artboard = nil;
        loop = nil;
    } catch (error) {
        log("Unique artboard sizes failed with error “" + error + "”.");
    }

    artboards = nil;

    var artboardNamesByIdentifier = {};
    var pages = [doc pages];
    var allArtboardsLoop = layersOfPagesWithType(pages, @"artboard").objectEnumerator();
    var artboard = nil;
    while (artboard = [allArtboardsLoop nextObject]) {
        artboardNamesByIdentifier[artboard.objectID()] = artboard.name();
    }

    pages = nil;
    artboard = nil;
    allArtboardsLoop = nil;

    var directives = defaultDirectives(context, temporaryPath);
    [directives setObject:@"artboards" forKey:@"type"];
    [directives setObject:artboardIds forKey:@"artboardIds"];
    [directives setObject:pageIds forKey:@"pageIds"];
    [directives setObject:uniqueArtboardSizes forKey:@"artboardSizes"];
    [directives setObject:artboardNamesByIdentifier forKey:@"artboardNames"];
    [directives setObject:containsArtboard forKey:@"containsArtboard"];

    if (shareId) {
        [directives setObject:shareId forKey:@"shareId"];
    }

    if (sourceFileName) {
        [directives setObject:sourceFileName forKey:@"sourceFileName"];
    }

    shareId = nil;
    sourceFileName = nil;
    artboardIds = nil;
    pageIds = nil;
    uniqueArtboardSizes = nil;
    artboardNamesByIdentifier = nil;

    var path = directivesPath();
    writeDirectives(directives, path);

    directives = nil;

    launchZeplin(context, path);

    path = nil;
}

var exportObjectsForType = function (context, type, temporaryPath) {
    var directives = defaultDirectives(context, temporaryPath);
    [directives setObject:type forKey:@"type"];

    var path = directivesPath();
    writeDirectives(directives, path);

    directives = nil;

    launchZeplin(context, path);

    path = nil;
}

var layersOfPagesWithType = function (pages, type) {
    var layers = [];
    var pagesLoop = pages.objectEnumerator();
    var page = nil;

    while (page = [pagesLoop nextObject]) {
        var pageLayers = [];
        var layersLoop = page.layers().objectEnumerator();
        var layer = nil;

        while (layer = [layersLoop nextObject]) {
            if (isLayerOfType(layer, type)) {
                pageLayers.push(layer);
            }
        }

        layers = layers.concat(pageLayers);
    }

    return NSArray.arrayWithArray(layers);
}

var isLayerOfType = function (layer, type) {
    var layerClassName = NSStringFromClass([layer class]);
    if ([type isEqualToString: @"symbol"]) {
        if ([layerClassName isEqualToString:@"MSSymbolMaster"]) {
            return true;
        }
    } else if ([type isEqualToString: @"artboard"]) {
        if (supportsFrame()) {
            if ([layerClassName isEqualToString: @"MSLayerGroup"]) {
                return [layer valueForKeyPath: @"groupBehavior"] != 0;
            }
        } else {
            return [layerClassName isEqualToString: @"MSArtboardGroup"];
        }
    }

    return false;
}
