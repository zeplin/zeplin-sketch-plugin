@import "helpers.cocoascript";

var onRun = function (context) {
    var doc = context.document;
    
    if (!documentExportable(context)) {
        return;
    }
    
    var foreignSymbolsUpToDate = true;
    // `MSBadgeController` is defined on Sketch 44, `activeWindowBadgingActions` is defined on Sketch 46.
    try {
        var activeActions = [[doc badgeController] activeWindowBadgingActions];
        var activeActionsLoop = [activeActions objectEnumerator];
        var action = nil;
        while (action = [activeActionsLoop nextObject]) {
            if ([action isKindOfClass:NSClassFromString(@"MSSyncLibraryAction")]) {
                foreignSymbolsUpToDate = false;
                
                break;
            }
        }
        
        action = nil;
        activeActionsLoop = nil;
        activeActions = nil;
    } catch (error) {
        log("Foreign symbols up to date failed with error “" + error + "”.");
    }
    
    if (!foreignSymbolsUpToDate) {
        var alert = [NSAlert alertWithMessageText:@"Symbols not up to date" defaultButton:@"Continue and Export" alternateButton:@"Cancel" otherButton:nil informativeTextWithFormat:@"To capture the latest changes in your libraries, make sure that your symbols are up to date before exporting artboards to Zeplin.\n\n☝️ Select “Library Update Available” on the top right to review changes."];
        
        if ([alert runModal] == NSAlertAlternateReturn) {
            return;
        }
        
        alert = nil;
    }
    
    var artboards = [context valueForKeyPath:@"selection.@distinctUnionOfObjects.parentArtboard"];
    if (![artboards count]) {
        [NSApp displayDialog:@"Please select the artboards you want to export to Zeplin.\n\n☝️ Selecting a layer inside the artboard should be enough." withTitle:@"No artboard selected"];
        return;
    }

    var artboardIds = [artboards valueForKeyPath:@"objectID"];

    var layers = [[[doc documentData] allSymbols] arrayByAddingObjectsFromArray:artboards];
    var pageIds = [layers valueForKeyPath:@"@distinctUnionOfObjects.parentPage.objectID"];
    
    layers = nil;

    var containsArtboard = false;
    var artboardsLoop = [artboards objectEnumerator];
    var artboard = nil;
    while (artboard = [artboardsLoop nextObject]) {
        var artboardClassName = NSStringFromClass([artboard class]);
        if ([artboardClassName isEqualToString:@"MSArtboardGroup"]) {
            containsArtboard = true;
            
            break;
        }
    }

    artboard = nil;
    artboardsLoop = nil;

    var uniqueArtboardSizes = [];
    // `size` on `CGRect` fails on Mocha, on macOS 10.13, Sketch 45 and below.
    try {
        var loop = [artboards objectEnumerator];
        var artboard = nil;
        while (artboard = [loop nextObject]) {
            var artboardSize = artboard.rect().size;
        
            var isUnique = true;
            for (var k = 0; k < uniqueArtboardSizes.length; k++) {
                if (uniqueArtboardSizes[k].width == artboardSize.width && uniqueArtboardSizes[k].height == artboardSize.height) {
                    isUnique = false;
        
                    break;
                }
            }
        
            if (isUnique) {
                uniqueArtboardSizes.push({
                    width: artboardSize.width, 
                    height: artboardSize.height
                });
            }
            
            artboardSize = nil;
            isUnique = nil;
        }
        
        artboard = nil;
        loop = nil;
    } catch (error) {
        log("Unique artboard sizes failed with error “" + error + "”.");
    }
    
    artboards = nil;

    var artboardNamesByIdentifier = {};
    var allArtboardsLoop = [[doc valueForKeyPath:@"pages.@distinctUnionOfArrays.artboards"] objectEnumerator];
    var artboard = nil;
    while (artboard = [allArtboardsLoop nextObject]) {
        artboardNamesByIdentifier[artboard.objectID()] = artboard.name();
    }

    artboard = nil;
    allArtboardsLoop = nil;
    
    var path = temporaryPath();
    var directives = defaultDirectives(context, path);
    [directives setObject:@"artboards" forKey:@"type"];
    [directives setObject:artboardIds forKey:@"artboardIds"];
    [directives setObject:pageIds forKey:@"pageIds"];
    [directives setObject:uniqueArtboardSizes forKey:@"artboardSizes"];
    [directives setObject:artboardNamesByIdentifier forKey:@"artboardNames"];
    [directives setObject:containsArtboard forKey:@"containsArtboard"];

    artboardIds = nil;
    pageIds = nil;
    uniqueArtboardSizes = nil;
    artboardNamesByIdentifier = nil;
    
    writeDirectives(directives, path);

    directives = nil;

    launchZeplin(context, path);

    path = nil;
}

var exportColors = function (context) {
    if (!documentExportable(context)) {
        return;
    }

    var path = temporaryPath();
    var directives = defaultDirectives(context, path);
    [directives setObject:@"colors" forKey:@"type"];

    writeDirectives(directives, path);

    directives = nil;

    launchZeplin(context, path);

    path = nil;
}

var exportTextStyles = function (context) {
    if (!documentExportable(context)) {
        return;
    }

    var path = temporaryPath();
    var directives = defaultDirectives(context, path);
    [directives setObject:@"textStyles" forKey:@"type"];

    writeDirectives(directives, path);

    directives = nil;

    launchZeplin(context, path);

    path = nil;
}
