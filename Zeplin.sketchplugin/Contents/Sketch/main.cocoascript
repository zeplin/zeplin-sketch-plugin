@import "utils.cocoascript";

var onRun = function (context) {
    var artboards = [];
    if (supportsFrame()) {
        artboards = [context valueForKeyPath:@"selection.@distinctUnionOfObjects.parentFrame"];
    } else {
        artboards = [context valueForKeyPath:@"selection.@distinctUnionOfObjects.parentArtboard"];
    }

    if (![artboards count]) {
        [NSApp displayDialog:@"Please select the artboards you want to export to Zeplin.\n\n☝️ Selecting a layer inside the artboard should be enough." withTitle:@"No artboard selected"];
        return;
    }

    if (!isSelectionExportable(artboards)) {
        return;
    }

    var temporaryPath = temporaryPathForDesignFile(context);
    if (!temporaryPath) {
        return;
    }

    exportArtboards(context, artboards, temporaryPath);
}

var exportColors = function (context) {
    var temporaryPath = temporaryPathForDesignFile(context);
    if (!temporaryPath) {
        return;
    }

    exportObjectsForType(context, @"colors", temporaryPath);
}

var exportTextStyles = function (context) {
    var temporaryPath = temporaryPathForDesignFile(context);
    if (!temporaryPath) {
        return;
    }

    exportObjectsForType(context, @"textStyles", temporaryPath);
}

var exportArtboardsFromCurrentPage = function (context) {
    var artboards = layersOfPagesWithType(NSArray.arrayWithObject(context.document.currentPage()), @"artboard");
    if (![artboards count]) {
        var artboardType = supportsFrame() ? @"a frame" : @"an artboard";
        [NSApp displayDialog:@"Please create " + artboardType + " to export to Zeplin." withTitle:@"No " + artboardType + " found"];

        return;
    }

    if (!isSelectionExportable(artboards)) {
        return;
    }

    var temporaryPath = temporaryPathForDesignFile(context);
    if (!temporaryPath) {
        return;
    }

    exportArtboards(context, artboards, temporaryPath);
}

var exportArtboardsFromAllPages = function (context) {
    var artboards = layersOfPagesWithType(context.document.pages(), @"artboard");
    if (![artboards count]) {
        var artboardType = supportsFrame() ? @"a frame" : @"an artboard";
        [NSApp displayDialog:@"Please create " + artboardType + " to export to Zeplin." withTitle:@"No " + artboardType + " found"];

        return;
    }

    if (!isSelectionExportable(artboards)) {
        return;
    }

    var temporaryPath = temporaryPathForDesignFile(context);
    if (!temporaryPath) {
        return;
    }

    exportArtboards(context, artboards, temporaryPath);
}

var exportSymbolsFromCurrentPage = function (context) {
    var artboards = layersOfPagesWithType(NSArray.arrayWithObject(context.document.currentPage()), @"symbol");
    if (![artboards count]) {
        [NSApp displayDialog:@"Please create a symbol to export to Zeplin." withTitle:@"No symbol found"];

        return;
    }

    if (!isSelectionExportable(artboards)) {
        return;
    }

    var temporaryPath = temporaryPathForDesignFile(context);
    if (!temporaryPath) {
        return;
    }

    exportArtboards(context, artboards, temporaryPath);
}

var exportSymbolsFromAllPages = function (context) {
    var artboards = layersOfPagesWithType(context.document.pages(), @"symbol");
    if (![artboards count]) {
        [NSApp displayDialog:@"Please create a symbol to export to Zeplin." withTitle:@"No symbol found"];

        return;
    }

    if (!isSelectionExportable(artboards)) {
        return;
    }

    var temporaryPath = temporaryPathForDesignFile(context);
    if (!temporaryPath) {
        return;
    }

    exportArtboards(context, artboards, temporaryPath);
}

var excludeSublayers = function (context) {
    var selection = context.selection;
    var layerEnumerator = [selection objectEnumerator];
    var layer;

    while (layer = [layerEnumerator nextObject]) {
        var layerName = [layer name];

        if (![layerName hasPrefix:@"-g-"]) {
            [layer setName:[@"-g-" stringByAppendingString:layerName]];
        }

        layerName = nil;
    }

    layer = nil;
    layerEnumerator = nil;
    selection = nil;
}

var includeSublayers = function (context) {
    var selection = context.selection;
    var layerEnumerator = [selection objectEnumerator];
    var layer;

    while (layer = [layerEnumerator nextObject]) {
        var layerName = [layer name];

        if ([layerName hasPrefix:@"-g-"]) {
            [layer setName:[layerName substringFromIndex:3]];
        }

        layerName = nil;
    }

    layer = nil;
    layerEnumerator = nil;
    selection = nil;
}
