var documentExportable = function (context) {
    var doc = context.document;
    
    if (![doc fileURL] || [doc isDraft]) {
        [NSApp displayDialog:@"Please save the document before exporting to Zeplin." withTitle:@"Document not saved"];

        return false;
    }
    
    if ([doc isDocumentEdited]) {
        var alert = [NSAlert alertWithMessageText:@"Document not saved" defaultButton:@"Save and Continue" alternateButton:@"Cancel" otherButton:@"Continue" informativeTextWithFormat:@"To capture the latest changes in this Sketch document, Zeplin needs to save it first.\n\n☝️ This might take a bit, depending on the document size."];
        
        var response = [alert runModal];
        if (response == NSAlertDefaultReturn) {
            [doc showMessage:@"Saving document…"];
            
            [doc saveDocument:nil];
            while ([doc isDocumentEdited]) {
                [[NSRunLoop currentRunLoop] runMode:NSDefaultRunLoopMode beforeDate:[NSDate distantFuture]];
            }
        } else if (response == NSAlertAlternateReturn) {
            return false;
        }
        
        response = nil;
        alert = nil;
    }

    return true;
}

var temporaryPath = function() {
    var name = [[[NSUUID UUID] UUIDString] stringByAppendingPathExtension:@"zpl"];
    var temporaryDirectory = NSTemporaryDirectory();
    var path = [temporaryDirectory stringByAppendingPathComponent:name];

    temporaryDirectory = nil;
    name = nil;

    return path;
}

var defaultDirectives = function(context, path) {
    var doc = context.document;

    var format = @"json";
    var readerClass = NSClassFromString(@"MSDocumentReader");
    var jsonReaderClass = NSClassFromString(@"MSDocumentZippedJSONReader");
    if (!readerClass || !jsonReaderClass || ![[readerClass readerForDocumentAtURL:[doc fileURL]] isKindOfClass:jsonReaderClass]) {
        format = @"legacy";
    }

    jsonReaderClass = nil;
    readerClass = nil;

    var assetLibraries = [];
    // `MSAssetLibraryController` defined on Sketch 47.
    try {
        var assetLibrariesLoop = [[[[AppController sharedInstance] librariesController] libraries] objectEnumerator];
        var assetLibrary = nil;
        while (assetLibrary = [assetLibrariesLoop nextObject]) {
            if (![assetLibrary enabled]) {
                continue;
            }
            
            var libraryID = [assetLibrary libraryID];
            if (!libraryID) {
                continue;
            }

            var url = [assetLibrary locationOnDisk];
            if (!url) {
                continue;
            }
            
            assetLibraries.push({
                id: libraryID,
                path: [url path]
            });
        }
        
        assetLibrary = nil;
        assetLibrariesLoop = nil;
    } catch (error) {
        log("Asset library paths by identifier failed with error “" + error + "”.");
    }

    var version = [[NSBundle mainBundle] objectForInfoDictionaryKey:@"CFBundleShortVersionString"];
    var sketchtoolPath = [[NSBundle mainBundle] pathForResource:@"sketchtool" ofType:nil inDirectory:@"sketchtool/bin"];
    var sketchmigratePath = [[NSBundle mainBundle] pathForResource:@"sketchmigrate" ofType:nil inDirectory:@"sketchtool/bin"];

    var directives = [NSMutableDictionary dictionary];
    [directives setObject:[[doc fileURL] path] forKey:@"path"];
    [directives setObject:format forKey:@"format"];
    [directives setObject:assetLibraries forKey:@"assetLibraries"];
    if (version) {
        [directives setObject:version forKey:@"version"];
    }
    if (sketchtoolPath) {
        [directives setObject:sketchtoolPath forKey:@"sketchtoolPath"];
    }
    if (sketchmigratePath) {
        [directives setObject:sketchmigratePath forKey:@"sketchmigratePath"];
    }

    format = nil;
    version = nil;
    sketchmigratePath = nil;
    sketchtoolPath = nil;
    assetLibraries = nil;

    return directives;
}

var writeDirectives = function (directives, path) {
    if (!path) {
        return nil;
    }

    [directives writeToFile:path atomically:false];

    return path;
}

var launchZeplin = function (context, path) {
    var doc = context.document;
    var workspace = [NSWorkspace sharedWorkspace];
    
    var applicationPath = [workspace absolutePathForAppBundleWithIdentifier:@"io.zeplin.osx"];
    if (!applicationPath) {
        [NSApp displayDialog:@"Please make sure that you installed and launched it: https://zpl.io/download" withTitle:"Could not find Zeplin"];

        return;
    }
    
    [doc showMessage:@"Launching Zeplin!"];
    
    [workspace openFile:path withApplication:applicationPath andDeactivate:true];

    workspace = nil;
    applicationPath = nil;
}

